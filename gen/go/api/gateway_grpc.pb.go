// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/gateway.proto

package apiv1

import (
	alsadx_campaign_v1 "alsadx.campaign.v1"
	alsadx_sso_v1 "alsadx.sso.v1"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Gateway_Register_FullMethodName            = "/gateway.Gateway/Register"
	Gateway_Login_FullMethodName               = "/gateway.Gateway/Login"
	Gateway_RefreshToken_FullMethodName        = "/gateway.Gateway/RefreshToken"
	Gateway_Logout_FullMethodName              = "/gateway.Gateway/Logout"
	Gateway_GetUserById_FullMethodName         = "/gateway.Gateway/GetUserById"
	Gateway_GetUserByEmail_FullMethodName      = "/gateway.Gateway/GetUserByEmail"
	Gateway_UpdateUser_FullMethodName          = "/gateway.Gateway/UpdateUser"
	Gateway_DeleteUser_FullMethodName          = "/gateway.Gateway/DeleteUser"
	Gateway_CreateCampaign_FullMethodName      = "/gateway.Gateway/CreateCampaign"
	Gateway_DeleteCampaign_FullMethodName      = "/gateway.Gateway/DeleteCampaign"
	Gateway_GenerateInviteCode_FullMethodName  = "/gateway.Gateway/GenerateInviteCode"
	Gateway_JoinCampaign_FullMethodName        = "/gateway.Gateway/JoinCampaign"
	Gateway_LeaveCampaign_FullMethodName       = "/gateway.Gateway/LeaveCampaign"
	Gateway_GetCreatedCampaigns_FullMethodName = "/gateway.Gateway/GetCreatedCampaigns"
	Gateway_GetCurrentCampaigns_FullMethodName = "/gateway.Gateway/GetCurrentCampaigns"
	Gateway_HealthCheck_FullMethodName         = "/gateway.Gateway/HealthCheck"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// Auth Service
	Register(ctx context.Context, in *alsadx_sso_v1.RegisterRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.RegisterResponse, error)
	Login(ctx context.Context, in *alsadx_sso_v1.LoginRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.LoginResponse, error)
	RefreshToken(ctx context.Context, in *alsadx_sso_v1.RefreshTokenRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.RefreshTokenResponse, error)
	Logout(ctx context.Context, in *alsadx_sso_v1.LogoutRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.LogoutResponse, error)
	// UserInfo Service
	GetUserById(ctx context.Context, in *alsadx_sso_v1.GetUserByIdRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.GetUserByIdResponse, error)
	GetUserByEmail(ctx context.Context, in *alsadx_sso_v1.GetUserByEmailRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.GetUserByEmailResponse, error)
	UpdateUser(ctx context.Context, in *alsadx_sso_v1.UpdateUserRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *alsadx_sso_v1.DeleteUserRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.DeleteUserResponse, error)
	// Campaign Tool Service
	CreateCampaign(ctx context.Context, in *alsadx_campaign_v1.CreateCampaignRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.CreateCampaignResponse, error)
	DeleteCampaign(ctx context.Context, in *alsadx_campaign_v1.DeleteCampaignRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.DeleteCampaignResponse, error)
	GenerateInviteCode(ctx context.Context, in *alsadx_campaign_v1.GenerateInviteCodeRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.GenerateInviteCodeResponse, error)
	JoinCampaign(ctx context.Context, in *alsadx_campaign_v1.JoinCampaignRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.JoinCampaignResponse, error)
	LeaveCampaign(ctx context.Context, in *alsadx_campaign_v1.LeaveCampaignRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.LeaveCampaignResponse, error)
	GetCreatedCampaigns(ctx context.Context, in *alsadx_campaign_v1.GetCreatedCampaignsRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.GetCreatedCampaignsResponse, error)
	GetCurrentCampaigns(ctx context.Context, in *alsadx_campaign_v1.GetCurrentCampaignsRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.GetCurrentCampaignsResponse, error)
	// HealthCheck
	HealthCheck(ctx context.Context, in *alsadx_sso_v1.HealthCheckRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.HealthCheckResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Register(ctx context.Context, in *alsadx_sso_v1.RegisterRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_sso_v1.RegisterResponse)
	err := c.cc.Invoke(ctx, Gateway_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Login(ctx context.Context, in *alsadx_sso_v1.LoginRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_sso_v1.LoginResponse)
	err := c.cc.Invoke(ctx, Gateway_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) RefreshToken(ctx context.Context, in *alsadx_sso_v1.RefreshTokenRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_sso_v1.RefreshTokenResponse)
	err := c.cc.Invoke(ctx, Gateway_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Logout(ctx context.Context, in *alsadx_sso_v1.LogoutRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_sso_v1.LogoutResponse)
	err := c.cc.Invoke(ctx, Gateway_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetUserById(ctx context.Context, in *alsadx_sso_v1.GetUserByIdRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.GetUserByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_sso_v1.GetUserByIdResponse)
	err := c.cc.Invoke(ctx, Gateway_GetUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetUserByEmail(ctx context.Context, in *alsadx_sso_v1.GetUserByEmailRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.GetUserByEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_sso_v1.GetUserByEmailResponse)
	err := c.cc.Invoke(ctx, Gateway_GetUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateUser(ctx context.Context, in *alsadx_sso_v1.UpdateUserRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_sso_v1.UpdateUserResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteUser(ctx context.Context, in *alsadx_sso_v1.DeleteUserRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_sso_v1.DeleteUserResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateCampaign(ctx context.Context, in *alsadx_campaign_v1.CreateCampaignRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.CreateCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_campaign_v1.CreateCampaignResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteCampaign(ctx context.Context, in *alsadx_campaign_v1.DeleteCampaignRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.DeleteCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_campaign_v1.DeleteCampaignResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GenerateInviteCode(ctx context.Context, in *alsadx_campaign_v1.GenerateInviteCodeRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.GenerateInviteCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_campaign_v1.GenerateInviteCodeResponse)
	err := c.cc.Invoke(ctx, Gateway_GenerateInviteCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) JoinCampaign(ctx context.Context, in *alsadx_campaign_v1.JoinCampaignRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.JoinCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_campaign_v1.JoinCampaignResponse)
	err := c.cc.Invoke(ctx, Gateway_JoinCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) LeaveCampaign(ctx context.Context, in *alsadx_campaign_v1.LeaveCampaignRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.LeaveCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_campaign_v1.LeaveCampaignResponse)
	err := c.cc.Invoke(ctx, Gateway_LeaveCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetCreatedCampaigns(ctx context.Context, in *alsadx_campaign_v1.GetCreatedCampaignsRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.GetCreatedCampaignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_campaign_v1.GetCreatedCampaignsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetCreatedCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetCurrentCampaigns(ctx context.Context, in *alsadx_campaign_v1.GetCurrentCampaignsRequest, opts ...grpc.CallOption) (*alsadx_campaign_v1.GetCurrentCampaignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_campaign_v1.GetCurrentCampaignsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetCurrentCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) HealthCheck(ctx context.Context, in *alsadx_sso_v1.HealthCheckRequest, opts ...grpc.CallOption) (*alsadx_sso_v1.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(alsadx_sso_v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, Gateway_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility.
type GatewayServer interface {
	// Auth Service
	Register(context.Context, *alsadx_sso_v1.RegisterRequest) (*alsadx_sso_v1.RegisterResponse, error)
	Login(context.Context, *alsadx_sso_v1.LoginRequest) (*alsadx_sso_v1.LoginResponse, error)
	RefreshToken(context.Context, *alsadx_sso_v1.RefreshTokenRequest) (*alsadx_sso_v1.RefreshTokenResponse, error)
	Logout(context.Context, *alsadx_sso_v1.LogoutRequest) (*alsadx_sso_v1.LogoutResponse, error)
	// UserInfo Service
	GetUserById(context.Context, *alsadx_sso_v1.GetUserByIdRequest) (*alsadx_sso_v1.GetUserByIdResponse, error)
	GetUserByEmail(context.Context, *alsadx_sso_v1.GetUserByEmailRequest) (*alsadx_sso_v1.GetUserByEmailResponse, error)
	UpdateUser(context.Context, *alsadx_sso_v1.UpdateUserRequest) (*alsadx_sso_v1.UpdateUserResponse, error)
	DeleteUser(context.Context, *alsadx_sso_v1.DeleteUserRequest) (*alsadx_sso_v1.DeleteUserResponse, error)
	// Campaign Tool Service
	CreateCampaign(context.Context, *alsadx_campaign_v1.CreateCampaignRequest) (*alsadx_campaign_v1.CreateCampaignResponse, error)
	DeleteCampaign(context.Context, *alsadx_campaign_v1.DeleteCampaignRequest) (*alsadx_campaign_v1.DeleteCampaignResponse, error)
	GenerateInviteCode(context.Context, *alsadx_campaign_v1.GenerateInviteCodeRequest) (*alsadx_campaign_v1.GenerateInviteCodeResponse, error)
	JoinCampaign(context.Context, *alsadx_campaign_v1.JoinCampaignRequest) (*alsadx_campaign_v1.JoinCampaignResponse, error)
	LeaveCampaign(context.Context, *alsadx_campaign_v1.LeaveCampaignRequest) (*alsadx_campaign_v1.LeaveCampaignResponse, error)
	GetCreatedCampaigns(context.Context, *alsadx_campaign_v1.GetCreatedCampaignsRequest) (*alsadx_campaign_v1.GetCreatedCampaignsResponse, error)
	GetCurrentCampaigns(context.Context, *alsadx_campaign_v1.GetCurrentCampaignsRequest) (*alsadx_campaign_v1.GetCurrentCampaignsResponse, error)
	// HealthCheck
	HealthCheck(context.Context, *alsadx_sso_v1.HealthCheckRequest) (*alsadx_sso_v1.HealthCheckResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServer struct{}

func (UnimplementedGatewayServer) Register(context.Context, *alsadx_sso_v1.RegisterRequest) (*alsadx_sso_v1.RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGatewayServer) Login(context.Context, *alsadx_sso_v1.LoginRequest) (*alsadx_sso_v1.LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGatewayServer) RefreshToken(context.Context, *alsadx_sso_v1.RefreshTokenRequest) (*alsadx_sso_v1.RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedGatewayServer) Logout(context.Context, *alsadx_sso_v1.LogoutRequest) (*alsadx_sso_v1.LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedGatewayServer) GetUserById(context.Context, *alsadx_sso_v1.GetUserByIdRequest) (*alsadx_sso_v1.GetUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedGatewayServer) GetUserByEmail(context.Context, *alsadx_sso_v1.GetUserByEmailRequest) (*alsadx_sso_v1.GetUserByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedGatewayServer) UpdateUser(context.Context, *alsadx_sso_v1.UpdateUserRequest) (*alsadx_sso_v1.UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedGatewayServer) DeleteUser(context.Context, *alsadx_sso_v1.DeleteUserRequest) (*alsadx_sso_v1.DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedGatewayServer) CreateCampaign(context.Context, *alsadx_campaign_v1.CreateCampaignRequest) (*alsadx_campaign_v1.CreateCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (UnimplementedGatewayServer) DeleteCampaign(context.Context, *alsadx_campaign_v1.DeleteCampaignRequest) (*alsadx_campaign_v1.DeleteCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaign not implemented")
}
func (UnimplementedGatewayServer) GenerateInviteCode(context.Context, *alsadx_campaign_v1.GenerateInviteCodeRequest) (*alsadx_campaign_v1.GenerateInviteCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInviteCode not implemented")
}
func (UnimplementedGatewayServer) JoinCampaign(context.Context, *alsadx_campaign_v1.JoinCampaignRequest) (*alsadx_campaign_v1.JoinCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCampaign not implemented")
}
func (UnimplementedGatewayServer) LeaveCampaign(context.Context, *alsadx_campaign_v1.LeaveCampaignRequest) (*alsadx_campaign_v1.LeaveCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveCampaign not implemented")
}
func (UnimplementedGatewayServer) GetCreatedCampaigns(context.Context, *alsadx_campaign_v1.GetCreatedCampaignsRequest) (*alsadx_campaign_v1.GetCreatedCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreatedCampaigns not implemented")
}
func (UnimplementedGatewayServer) GetCurrentCampaigns(context.Context, *alsadx_campaign_v1.GetCurrentCampaignsRequest) (*alsadx_campaign_v1.GetCurrentCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentCampaigns not implemented")
}
func (UnimplementedGatewayServer) HealthCheck(context.Context, *alsadx_sso_v1.HealthCheckRequest) (*alsadx_sso_v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}
func (UnimplementedGatewayServer) testEmbeddedByValue()                 {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_sso_v1.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Register(ctx, req.(*alsadx_sso_v1.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_sso_v1.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Login(ctx, req.(*alsadx_sso_v1.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_sso_v1.RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).RefreshToken(ctx, req.(*alsadx_sso_v1.RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_sso_v1.LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Logout(ctx, req.(*alsadx_sso_v1.LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_sso_v1.GetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetUserById(ctx, req.(*alsadx_sso_v1.GetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_sso_v1.GetUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetUserByEmail(ctx, req.(*alsadx_sso_v1.GetUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_sso_v1.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateUser(ctx, req.(*alsadx_sso_v1.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_sso_v1.DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteUser(ctx, req.(*alsadx_sso_v1.DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_campaign_v1.CreateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateCampaign(ctx, req.(*alsadx_campaign_v1.CreateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_campaign_v1.DeleteCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteCampaign(ctx, req.(*alsadx_campaign_v1.DeleteCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GenerateInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_campaign_v1.GenerateInviteCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GenerateInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GenerateInviteCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GenerateInviteCode(ctx, req.(*alsadx_campaign_v1.GenerateInviteCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_JoinCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_campaign_v1.JoinCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).JoinCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_JoinCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).JoinCampaign(ctx, req.(*alsadx_campaign_v1.JoinCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_LeaveCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_campaign_v1.LeaveCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).LeaveCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_LeaveCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).LeaveCampaign(ctx, req.(*alsadx_campaign_v1.LeaveCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetCreatedCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_campaign_v1.GetCreatedCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetCreatedCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetCreatedCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetCreatedCampaigns(ctx, req.(*alsadx_campaign_v1.GetCreatedCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetCurrentCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_campaign_v1.GetCurrentCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetCurrentCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetCurrentCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetCurrentCampaigns(ctx, req.(*alsadx_campaign_v1.GetCurrentCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(alsadx_sso_v1.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).HealthCheck(ctx, req.(*alsadx_sso_v1.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Gateway_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Gateway_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Gateway_RefreshToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Gateway_Logout_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _Gateway_GetUserById_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _Gateway_GetUserByEmail_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Gateway_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Gateway_DeleteUser_Handler,
		},
		{
			MethodName: "CreateCampaign",
			Handler:    _Gateway_CreateCampaign_Handler,
		},
		{
			MethodName: "DeleteCampaign",
			Handler:    _Gateway_DeleteCampaign_Handler,
		},
		{
			MethodName: "GenerateInviteCode",
			Handler:    _Gateway_GenerateInviteCode_Handler,
		},
		{
			MethodName: "JoinCampaign",
			Handler:    _Gateway_JoinCampaign_Handler,
		},
		{
			MethodName: "LeaveCampaign",
			Handler:    _Gateway_LeaveCampaign_Handler,
		},
		{
			MethodName: "GetCreatedCampaigns",
			Handler:    _Gateway_GetCreatedCampaigns_Handler,
		},
		{
			MethodName: "GetCurrentCampaigns",
			Handler:    _Gateway_GetCurrentCampaigns_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Gateway_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gateway.proto",
}
