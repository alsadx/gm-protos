// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: character/service/character_health.proto

package character_health

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CharacterHealthService_SetMaxHP_FullMethodName     = "/character_health.v1.CharacterHealthService/SetMaxHP"
	CharacterHealthService_SetCurrentHP_FullMethodName = "/character_health.v1.CharacterHealthService/SetCurrentHP"
	CharacterHealthService_SetTempHP_FullMethodName    = "/character_health.v1.CharacterHealthService/SetTempHP"
	CharacterHealthService_Heal_FullMethodName         = "/character_health.v1.CharacterHealthService/Heal"
	CharacterHealthService_TakeDamage_FullMethodName   = "/character_health.v1.CharacterHealthService/TakeDamage"
	CharacterHealthService_IsKnocked_FullMethodName    = "/character_health.v1.CharacterHealthService/IsKnocked"
	CharacterHealthService_GetHPState_FullMethodName   = "/character_health.v1.CharacterHealthService/GetHPState"
)

// CharacterHealthServiceClient is the client API for CharacterHealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterHealthServiceClient interface {
	// Set the maximum HP
	SetMaxHP(ctx context.Context, in *SetHpRequest, opts ...grpc.CallOption) (*HpState, error)
	// Set the current HP
	SetCurrentHP(ctx context.Context, in *SetHpRequest, opts ...grpc.CallOption) (*HpState, error)
	// Set temporary HP
	SetTempHP(ctx context.Context, in *SetHpRequest, opts ...grpc.CallOption) (*HpState, error)
	// Character Treatment
	Heal(ctx context.Context, in *ModifyHpRequest, opts ...grpc.CallOption) (*HpState, error)
	// Doing damage
	TakeDamage(ctx context.Context, in *ModifyHpRequest, opts ...grpc.CallOption) (*HpState, error)
	// Checking the knockout status
	IsKnocked(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*IsKnockedResponse, error)
	// Obtain the current HP state
	GetHPState(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*HpState, error)
}

type characterHealthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterHealthServiceClient(cc grpc.ClientConnInterface) CharacterHealthServiceClient {
	return &characterHealthServiceClient{cc}
}

func (c *characterHealthServiceClient) SetMaxHP(ctx context.Context, in *SetHpRequest, opts ...grpc.CallOption) (*HpState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HpState)
	err := c.cc.Invoke(ctx, CharacterHealthService_SetMaxHP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterHealthServiceClient) SetCurrentHP(ctx context.Context, in *SetHpRequest, opts ...grpc.CallOption) (*HpState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HpState)
	err := c.cc.Invoke(ctx, CharacterHealthService_SetCurrentHP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterHealthServiceClient) SetTempHP(ctx context.Context, in *SetHpRequest, opts ...grpc.CallOption) (*HpState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HpState)
	err := c.cc.Invoke(ctx, CharacterHealthService_SetTempHP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterHealthServiceClient) Heal(ctx context.Context, in *ModifyHpRequest, opts ...grpc.CallOption) (*HpState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HpState)
	err := c.cc.Invoke(ctx, CharacterHealthService_Heal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterHealthServiceClient) TakeDamage(ctx context.Context, in *ModifyHpRequest, opts ...grpc.CallOption) (*HpState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HpState)
	err := c.cc.Invoke(ctx, CharacterHealthService_TakeDamage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterHealthServiceClient) IsKnocked(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*IsKnockedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsKnockedResponse)
	err := c.cc.Invoke(ctx, CharacterHealthService_IsKnocked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterHealthServiceClient) GetHPState(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*HpState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HpState)
	err := c.cc.Invoke(ctx, CharacterHealthService_GetHPState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterHealthServiceServer is the server API for CharacterHealthService service.
// All implementations must embed UnimplementedCharacterHealthServiceServer
// for forward compatibility.
type CharacterHealthServiceServer interface {
	// Set the maximum HP
	SetMaxHP(context.Context, *SetHpRequest) (*HpState, error)
	// Set the current HP
	SetCurrentHP(context.Context, *SetHpRequest) (*HpState, error)
	// Set temporary HP
	SetTempHP(context.Context, *SetHpRequest) (*HpState, error)
	// Character Treatment
	Heal(context.Context, *ModifyHpRequest) (*HpState, error)
	// Doing damage
	TakeDamage(context.Context, *ModifyHpRequest) (*HpState, error)
	// Checking the knockout status
	IsKnocked(context.Context, *CharacterID) (*IsKnockedResponse, error)
	// Obtain the current HP state
	GetHPState(context.Context, *CharacterID) (*HpState, error)
	mustEmbedUnimplementedCharacterHealthServiceServer()
}

// UnimplementedCharacterHealthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCharacterHealthServiceServer struct{}

func (UnimplementedCharacterHealthServiceServer) SetMaxHP(context.Context, *SetHpRequest) (*HpState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxHP not implemented")
}
func (UnimplementedCharacterHealthServiceServer) SetCurrentHP(context.Context, *SetHpRequest) (*HpState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentHP not implemented")
}
func (UnimplementedCharacterHealthServiceServer) SetTempHP(context.Context, *SetHpRequest) (*HpState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTempHP not implemented")
}
func (UnimplementedCharacterHealthServiceServer) Heal(context.Context, *ModifyHpRequest) (*HpState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heal not implemented")
}
func (UnimplementedCharacterHealthServiceServer) TakeDamage(context.Context, *ModifyHpRequest) (*HpState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeDamage not implemented")
}
func (UnimplementedCharacterHealthServiceServer) IsKnocked(context.Context, *CharacterID) (*IsKnockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsKnocked not implemented")
}
func (UnimplementedCharacterHealthServiceServer) GetHPState(context.Context, *CharacterID) (*HpState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHPState not implemented")
}
func (UnimplementedCharacterHealthServiceServer) mustEmbedUnimplementedCharacterHealthServiceServer() {
}
func (UnimplementedCharacterHealthServiceServer) testEmbeddedByValue() {}

// UnsafeCharacterHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterHealthServiceServer will
// result in compilation errors.
type UnsafeCharacterHealthServiceServer interface {
	mustEmbedUnimplementedCharacterHealthServiceServer()
}

func RegisterCharacterHealthServiceServer(s grpc.ServiceRegistrar, srv CharacterHealthServiceServer) {
	// If the following call pancis, it indicates UnimplementedCharacterHealthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CharacterHealthService_ServiceDesc, srv)
}

func _CharacterHealthService_SetMaxHP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterHealthServiceServer).SetMaxHP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterHealthService_SetMaxHP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterHealthServiceServer).SetMaxHP(ctx, req.(*SetHpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterHealthService_SetCurrentHP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterHealthServiceServer).SetCurrentHP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterHealthService_SetCurrentHP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterHealthServiceServer).SetCurrentHP(ctx, req.(*SetHpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterHealthService_SetTempHP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterHealthServiceServer).SetTempHP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterHealthService_SetTempHP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterHealthServiceServer).SetTempHP(ctx, req.(*SetHpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterHealthService_Heal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyHpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterHealthServiceServer).Heal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterHealthService_Heal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterHealthServiceServer).Heal(ctx, req.(*ModifyHpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterHealthService_TakeDamage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyHpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterHealthServiceServer).TakeDamage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterHealthService_TakeDamage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterHealthServiceServer).TakeDamage(ctx, req.(*ModifyHpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterHealthService_IsKnocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterHealthServiceServer).IsKnocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterHealthService_IsKnocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterHealthServiceServer).IsKnocked(ctx, req.(*CharacterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterHealthService_GetHPState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterHealthServiceServer).GetHPState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterHealthService_GetHPState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterHealthServiceServer).GetHPState(ctx, req.(*CharacterID))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterHealthService_ServiceDesc is the grpc.ServiceDesc for CharacterHealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterHealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "character_health.v1.CharacterHealthService",
	HandlerType: (*CharacterHealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMaxHP",
			Handler:    _CharacterHealthService_SetMaxHP_Handler,
		},
		{
			MethodName: "SetCurrentHP",
			Handler:    _CharacterHealthService_SetCurrentHP_Handler,
		},
		{
			MethodName: "SetTempHP",
			Handler:    _CharacterHealthService_SetTempHP_Handler,
		},
		{
			MethodName: "Heal",
			Handler:    _CharacterHealthService_Heal_Handler,
		},
		{
			MethodName: "TakeDamage",
			Handler:    _CharacterHealthService_TakeDamage_Handler,
		},
		{
			MethodName: "IsKnocked",
			Handler:    _CharacterHealthService_IsKnocked_Handler,
		},
		{
			MethodName: "GetHPState",
			Handler:    _CharacterHealthService_GetHPState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "character/service/character_health.proto",
}
