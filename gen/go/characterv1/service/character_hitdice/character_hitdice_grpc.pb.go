// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: character/service/character_hitdice.proto

package character_hitdice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CharacterHitDiceService_GetHitDice_FullMethodName    = "/character_hitdice.v1.CharacterHitDiceService/GetHitDice"
	CharacterHitDiceService_AddHitDice_FullMethodName    = "/character_hitdice.v1.CharacterHitDiceService/AddHitDice"
	CharacterHitDiceService_RemoveHitDice_FullMethodName = "/character_hitdice.v1.CharacterHitDiceService/RemoveHitDice"
	CharacterHitDiceService_RollHitDice_FullMethodName   = "/character_hitdice.v1.CharacterHitDiceService/RollHitDice"
	CharacterHitDiceService_ResetHitDice_FullMethodName  = "/character_hitdice.v1.CharacterHitDiceService/ResetHitDice"
)

// CharacterHitDiceServiceClient is the client API for CharacterHitDiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterHitDiceServiceClient interface {
	// GetHitDice retrieves current hit dice state for a character
	GetHitDice(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*HitDiceResponse, error)
	// AddHitDice adds hit dice of specified type to a character
	AddHitDice(ctx context.Context, in *HitDiceRequest, opts ...grpc.CallOption) (*HitDiceResponse, error)
	// RemoveHitDice removes hit dice of specified type from a character
	RemoveHitDice(ctx context.Context, in *HitDiceRequest, opts ...grpc.CallOption) (*HitDiceResponse, error)
	// RollHitDice rolls specified hit dice and returns the result
	RollHitDice(ctx context.Context, in *HitDiceMapRequest, opts ...grpc.CallOption) (*RollHitDiceResponse, error)
	// ResetHitDice resets all hit dice to maximum for the character
	ResetHitDice(ctx context.Context, in *HitDiceMapRequest, opts ...grpc.CallOption) (*HitDiceResponse, error)
}

type characterHitDiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterHitDiceServiceClient(cc grpc.ClientConnInterface) CharacterHitDiceServiceClient {
	return &characterHitDiceServiceClient{cc}
}

func (c *characterHitDiceServiceClient) GetHitDice(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*HitDiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HitDiceResponse)
	err := c.cc.Invoke(ctx, CharacterHitDiceService_GetHitDice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterHitDiceServiceClient) AddHitDice(ctx context.Context, in *HitDiceRequest, opts ...grpc.CallOption) (*HitDiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HitDiceResponse)
	err := c.cc.Invoke(ctx, CharacterHitDiceService_AddHitDice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterHitDiceServiceClient) RemoveHitDice(ctx context.Context, in *HitDiceRequest, opts ...grpc.CallOption) (*HitDiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HitDiceResponse)
	err := c.cc.Invoke(ctx, CharacterHitDiceService_RemoveHitDice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterHitDiceServiceClient) RollHitDice(ctx context.Context, in *HitDiceMapRequest, opts ...grpc.CallOption) (*RollHitDiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollHitDiceResponse)
	err := c.cc.Invoke(ctx, CharacterHitDiceService_RollHitDice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterHitDiceServiceClient) ResetHitDice(ctx context.Context, in *HitDiceMapRequest, opts ...grpc.CallOption) (*HitDiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HitDiceResponse)
	err := c.cc.Invoke(ctx, CharacterHitDiceService_ResetHitDice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterHitDiceServiceServer is the server API for CharacterHitDiceService service.
// All implementations must embed UnimplementedCharacterHitDiceServiceServer
// for forward compatibility.
type CharacterHitDiceServiceServer interface {
	// GetHitDice retrieves current hit dice state for a character
	GetHitDice(context.Context, *CharacterID) (*HitDiceResponse, error)
	// AddHitDice adds hit dice of specified type to a character
	AddHitDice(context.Context, *HitDiceRequest) (*HitDiceResponse, error)
	// RemoveHitDice removes hit dice of specified type from a character
	RemoveHitDice(context.Context, *HitDiceRequest) (*HitDiceResponse, error)
	// RollHitDice rolls specified hit dice and returns the result
	RollHitDice(context.Context, *HitDiceMapRequest) (*RollHitDiceResponse, error)
	// ResetHitDice resets all hit dice to maximum for the character
	ResetHitDice(context.Context, *HitDiceMapRequest) (*HitDiceResponse, error)
	mustEmbedUnimplementedCharacterHitDiceServiceServer()
}

// UnimplementedCharacterHitDiceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCharacterHitDiceServiceServer struct{}

func (UnimplementedCharacterHitDiceServiceServer) GetHitDice(context.Context, *CharacterID) (*HitDiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHitDice not implemented")
}
func (UnimplementedCharacterHitDiceServiceServer) AddHitDice(context.Context, *HitDiceRequest) (*HitDiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHitDice not implemented")
}
func (UnimplementedCharacterHitDiceServiceServer) RemoveHitDice(context.Context, *HitDiceRequest) (*HitDiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHitDice not implemented")
}
func (UnimplementedCharacterHitDiceServiceServer) RollHitDice(context.Context, *HitDiceMapRequest) (*RollHitDiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollHitDice not implemented")
}
func (UnimplementedCharacterHitDiceServiceServer) ResetHitDice(context.Context, *HitDiceMapRequest) (*HitDiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetHitDice not implemented")
}
func (UnimplementedCharacterHitDiceServiceServer) mustEmbedUnimplementedCharacterHitDiceServiceServer() {
}
func (UnimplementedCharacterHitDiceServiceServer) testEmbeddedByValue() {}

// UnsafeCharacterHitDiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterHitDiceServiceServer will
// result in compilation errors.
type UnsafeCharacterHitDiceServiceServer interface {
	mustEmbedUnimplementedCharacterHitDiceServiceServer()
}

func RegisterCharacterHitDiceServiceServer(s grpc.ServiceRegistrar, srv CharacterHitDiceServiceServer) {
	// If the following call pancis, it indicates UnimplementedCharacterHitDiceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CharacterHitDiceService_ServiceDesc, srv)
}

func _CharacterHitDiceService_GetHitDice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterHitDiceServiceServer).GetHitDice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterHitDiceService_GetHitDice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterHitDiceServiceServer).GetHitDice(ctx, req.(*CharacterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterHitDiceService_AddHitDice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitDiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterHitDiceServiceServer).AddHitDice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterHitDiceService_AddHitDice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterHitDiceServiceServer).AddHitDice(ctx, req.(*HitDiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterHitDiceService_RemoveHitDice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitDiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterHitDiceServiceServer).RemoveHitDice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterHitDiceService_RemoveHitDice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterHitDiceServiceServer).RemoveHitDice(ctx, req.(*HitDiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterHitDiceService_RollHitDice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitDiceMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterHitDiceServiceServer).RollHitDice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterHitDiceService_RollHitDice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterHitDiceServiceServer).RollHitDice(ctx, req.(*HitDiceMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterHitDiceService_ResetHitDice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HitDiceMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterHitDiceServiceServer).ResetHitDice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterHitDiceService_ResetHitDice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterHitDiceServiceServer).ResetHitDice(ctx, req.(*HitDiceMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterHitDiceService_ServiceDesc is the grpc.ServiceDesc for CharacterHitDiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterHitDiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "character_hitdice.v1.CharacterHitDiceService",
	HandlerType: (*CharacterHitDiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHitDice",
			Handler:    _CharacterHitDiceService_GetHitDice_Handler,
		},
		{
			MethodName: "AddHitDice",
			Handler:    _CharacterHitDiceService_AddHitDice_Handler,
		},
		{
			MethodName: "RemoveHitDice",
			Handler:    _CharacterHitDiceService_RemoveHitDice_Handler,
		},
		{
			MethodName: "RollHitDice",
			Handler:    _CharacterHitDiceService_RollHitDice_Handler,
		},
		{
			MethodName: "ResetHitDice",
			Handler:    _CharacterHitDiceService_ResetHitDice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "character/service/character_hitdice.proto",
}
