// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: character/service/character_core.proto

package character_core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CharacterCoreService_CreateCharacter_FullMethodName       = "/character_core.v1.CharacterCoreService/CreateCharacter"
	CharacterCoreService_GetCharacter_FullMethodName          = "/character_core.v1.CharacterCoreService/GetCharacter"
	CharacterCoreService_UpdateCharacter_FullMethodName       = "/character_core.v1.CharacterCoreService/UpdateCharacter"
	CharacterCoreService_DeleteCharacter_FullMethodName       = "/character_core.v1.CharacterCoreService/DeleteCharacter"
	CharacterCoreService_ListCharacters_FullMethodName        = "/character_core.v1.CharacterCoreService/ListCharacters"
	CharacterCoreService_GetInfoAboutCharacter_FullMethodName = "/character_core.v1.CharacterCoreService/GetInfoAboutCharacter"
)

// CharacterCoreServiceClient is the client API for CharacterCoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterCoreServiceClient interface {
	// CreateCharacter creates a new character with the given details
	CreateCharacter(ctx context.Context, in *CreateCharRequest, opts ...grpc.CallOption) (*CharacterID, error)
	// GetCharacter retrieves full character details by ID
	GetCharacter(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*GetCharResponse, error)
	// UpdateCharacter partially updates character information
	UpdateCharacter(ctx context.Context, in *UpdateCharRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteCharacter removes a character by ID
	DeleteCharacter(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListCharacters returns all characters for a given owner
	ListCharacters(ctx context.Context, in *ListCharRequest, opts ...grpc.CallOption) (*ListCharResponse, error)
	// GetInfoAboutCharacter returns basic character information
	GetInfoAboutCharacter(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*GetInfoResponse, error)
}

type characterCoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterCoreServiceClient(cc grpc.ClientConnInterface) CharacterCoreServiceClient {
	return &characterCoreServiceClient{cc}
}

func (c *characterCoreServiceClient) CreateCharacter(ctx context.Context, in *CreateCharRequest, opts ...grpc.CallOption) (*CharacterID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CharacterID)
	err := c.cc.Invoke(ctx, CharacterCoreService_CreateCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterCoreServiceClient) GetCharacter(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*GetCharResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCharResponse)
	err := c.cc.Invoke(ctx, CharacterCoreService_GetCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterCoreServiceClient) UpdateCharacter(ctx context.Context, in *UpdateCharRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CharacterCoreService_UpdateCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterCoreServiceClient) DeleteCharacter(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CharacterCoreService_DeleteCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterCoreServiceClient) ListCharacters(ctx context.Context, in *ListCharRequest, opts ...grpc.CallOption) (*ListCharResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCharResponse)
	err := c.cc.Invoke(ctx, CharacterCoreService_ListCharacters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterCoreServiceClient) GetInfoAboutCharacter(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, CharacterCoreService_GetInfoAboutCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterCoreServiceServer is the server API for CharacterCoreService service.
// All implementations must embed UnimplementedCharacterCoreServiceServer
// for forward compatibility.
type CharacterCoreServiceServer interface {
	// CreateCharacter creates a new character with the given details
	CreateCharacter(context.Context, *CreateCharRequest) (*CharacterID, error)
	// GetCharacter retrieves full character details by ID
	GetCharacter(context.Context, *CharacterID) (*GetCharResponse, error)
	// UpdateCharacter partially updates character information
	UpdateCharacter(context.Context, *UpdateCharRequest) (*emptypb.Empty, error)
	// DeleteCharacter removes a character by ID
	DeleteCharacter(context.Context, *CharacterID) (*emptypb.Empty, error)
	// ListCharacters returns all characters for a given owner
	ListCharacters(context.Context, *ListCharRequest) (*ListCharResponse, error)
	// GetInfoAboutCharacter returns basic character information
	GetInfoAboutCharacter(context.Context, *CharacterID) (*GetInfoResponse, error)
	mustEmbedUnimplementedCharacterCoreServiceServer()
}

// UnimplementedCharacterCoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCharacterCoreServiceServer struct{}

func (UnimplementedCharacterCoreServiceServer) CreateCharacter(context.Context, *CreateCharRequest) (*CharacterID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharacter not implemented")
}
func (UnimplementedCharacterCoreServiceServer) GetCharacter(context.Context, *CharacterID) (*GetCharResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacter not implemented")
}
func (UnimplementedCharacterCoreServiceServer) UpdateCharacter(context.Context, *UpdateCharRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCharacter not implemented")
}
func (UnimplementedCharacterCoreServiceServer) DeleteCharacter(context.Context, *CharacterID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCharacter not implemented")
}
func (UnimplementedCharacterCoreServiceServer) ListCharacters(context.Context, *ListCharRequest) (*ListCharResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCharacters not implemented")
}
func (UnimplementedCharacterCoreServiceServer) GetInfoAboutCharacter(context.Context, *CharacterID) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoAboutCharacter not implemented")
}
func (UnimplementedCharacterCoreServiceServer) mustEmbedUnimplementedCharacterCoreServiceServer() {}
func (UnimplementedCharacterCoreServiceServer) testEmbeddedByValue()                              {}

// UnsafeCharacterCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterCoreServiceServer will
// result in compilation errors.
type UnsafeCharacterCoreServiceServer interface {
	mustEmbedUnimplementedCharacterCoreServiceServer()
}

func RegisterCharacterCoreServiceServer(s grpc.ServiceRegistrar, srv CharacterCoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedCharacterCoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CharacterCoreService_ServiceDesc, srv)
}

func _CharacterCoreService_CreateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCharRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterCoreServiceServer).CreateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterCoreService_CreateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterCoreServiceServer).CreateCharacter(ctx, req.(*CreateCharRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterCoreService_GetCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterCoreServiceServer).GetCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterCoreService_GetCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterCoreServiceServer).GetCharacter(ctx, req.(*CharacterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterCoreService_UpdateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCharRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterCoreServiceServer).UpdateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterCoreService_UpdateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterCoreServiceServer).UpdateCharacter(ctx, req.(*UpdateCharRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterCoreService_DeleteCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterCoreServiceServer).DeleteCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterCoreService_DeleteCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterCoreServiceServer).DeleteCharacter(ctx, req.(*CharacterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterCoreService_ListCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCharRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterCoreServiceServer).ListCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterCoreService_ListCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterCoreServiceServer).ListCharacters(ctx, req.(*ListCharRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterCoreService_GetInfoAboutCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterCoreServiceServer).GetInfoAboutCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterCoreService_GetInfoAboutCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterCoreServiceServer).GetInfoAboutCharacter(ctx, req.(*CharacterID))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterCoreService_ServiceDesc is the grpc.ServiceDesc for CharacterCoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterCoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "character_core.v1.CharacterCoreService",
	HandlerType: (*CharacterCoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCharacter",
			Handler:    _CharacterCoreService_CreateCharacter_Handler,
		},
		{
			MethodName: "GetCharacter",
			Handler:    _CharacterCoreService_GetCharacter_Handler,
		},
		{
			MethodName: "UpdateCharacter",
			Handler:    _CharacterCoreService_UpdateCharacter_Handler,
		},
		{
			MethodName: "DeleteCharacter",
			Handler:    _CharacterCoreService_DeleteCharacter_Handler,
		},
		{
			MethodName: "ListCharacters",
			Handler:    _CharacterCoreService_ListCharacters_Handler,
		},
		{
			MethodName: "GetInfoAboutCharacter",
			Handler:    _CharacterCoreService_GetInfoAboutCharacter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "character/service/character_core.proto",
}
