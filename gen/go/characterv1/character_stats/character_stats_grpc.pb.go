// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: character/service/character_stats.proto

package character_stats

import (
	context "context"
	characterv1 "github.com/alsadx/gm-protos/gen/go/characterv1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CharacterStatsService_CheckAbility_FullMethodName    = "/character_stats.v1.CharacterStatsService/CheckAbility"
	CharacterStatsService_CheckSkill_FullMethodName      = "/character_stats.v1.CharacterStatsService/CheckSkill"
	CharacterStatsService_SetAbilityScore_FullMethodName = "/character_stats.v1.CharacterStatsService/SetAbilityScore"
	CharacterStatsService_SetAbilityBonus_FullMethodName = "/character_stats.v1.CharacterStatsService/SetAbilityBonus"
	CharacterStatsService_SetSkillBonus_FullMethodName   = "/character_stats.v1.CharacterStatsService/SetSkillBonus"
	CharacterStatsService_GetStats_FullMethodName        = "/character_stats.v1.CharacterStatsService/GetStats"
	CharacterStatsService_GetModifier_FullMethodName     = "/character_stats.v1.CharacterStatsService/GetModifier"
	CharacterStatsService_GetAbility_FullMethodName      = "/character_stats.v1.CharacterStatsService/GetAbility"
)

// CharacterStatsServiceClient is the client API for CharacterStatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterStatsServiceClient interface {
	// CheckAbility performs an ability check for a character
	CheckAbility(ctx context.Context, in *AbilityRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	// CheckSkill performs a skill check for a character
	CheckSkill(ctx context.Context, in *SkillRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	// SetAbilityScore sets the base ability score
	SetAbilityScore(ctx context.Context, in *SetAbilityRequest, opts ...grpc.CallOption) (*SetAbilityResponse, error)
	// SetAbilityBonus sets the ability bonus
	SetAbilityBonus(ctx context.Context, in *SetAbilityRequest, opts ...grpc.CallOption) (*SetAbilityResponse, error)
	// SetSkillBonus sets the skill bonus
	SetSkillBonus(ctx context.Context, in *SetSkillBonusRequest, opts ...grpc.CallOption) (*SetSkillBonusResponse, error)
	// GetStats retrieves all character stats
	GetStats(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*GetStatsResponse, error)
	// GetModifier retrieves ability modifier
	GetModifier(ctx context.Context, in *GetModifierRequest, opts ...grpc.CallOption) (*GetModifierResponse, error)
	GetAbility(ctx context.Context, in *AbilityRequest, opts ...grpc.CallOption) (*characterv1.Ability, error)
}

type characterStatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterStatsServiceClient(cc grpc.ClientConnInterface) CharacterStatsServiceClient {
	return &characterStatsServiceClient{cc}
}

func (c *characterStatsServiceClient) CheckAbility(ctx context.Context, in *AbilityRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, CharacterStatsService_CheckAbility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterStatsServiceClient) CheckSkill(ctx context.Context, in *SkillRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, CharacterStatsService_CheckSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterStatsServiceClient) SetAbilityScore(ctx context.Context, in *SetAbilityRequest, opts ...grpc.CallOption) (*SetAbilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAbilityResponse)
	err := c.cc.Invoke(ctx, CharacterStatsService_SetAbilityScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterStatsServiceClient) SetAbilityBonus(ctx context.Context, in *SetAbilityRequest, opts ...grpc.CallOption) (*SetAbilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAbilityResponse)
	err := c.cc.Invoke(ctx, CharacterStatsService_SetAbilityBonus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterStatsServiceClient) SetSkillBonus(ctx context.Context, in *SetSkillBonusRequest, opts ...grpc.CallOption) (*SetSkillBonusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSkillBonusResponse)
	err := c.cc.Invoke(ctx, CharacterStatsService_SetSkillBonus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterStatsServiceClient) GetStats(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, CharacterStatsService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterStatsServiceClient) GetModifier(ctx context.Context, in *GetModifierRequest, opts ...grpc.CallOption) (*GetModifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModifierResponse)
	err := c.cc.Invoke(ctx, CharacterStatsService_GetModifier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterStatsServiceClient) GetAbility(ctx context.Context, in *AbilityRequest, opts ...grpc.CallOption) (*characterv1.Ability, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(characterv1.Ability)
	err := c.cc.Invoke(ctx, CharacterStatsService_GetAbility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterStatsServiceServer is the server API for CharacterStatsService service.
// All implementations must embed UnimplementedCharacterStatsServiceServer
// for forward compatibility.
type CharacterStatsServiceServer interface {
	// CheckAbility performs an ability check for a character
	CheckAbility(context.Context, *AbilityRequest) (*CheckResponse, error)
	// CheckSkill performs a skill check for a character
	CheckSkill(context.Context, *SkillRequest) (*CheckResponse, error)
	// SetAbilityScore sets the base ability score
	SetAbilityScore(context.Context, *SetAbilityRequest) (*SetAbilityResponse, error)
	// SetAbilityBonus sets the ability bonus
	SetAbilityBonus(context.Context, *SetAbilityRequest) (*SetAbilityResponse, error)
	// SetSkillBonus sets the skill bonus
	SetSkillBonus(context.Context, *SetSkillBonusRequest) (*SetSkillBonusResponse, error)
	// GetStats retrieves all character stats
	GetStats(context.Context, *CharacterID) (*GetStatsResponse, error)
	// GetModifier retrieves ability modifier
	GetModifier(context.Context, *GetModifierRequest) (*GetModifierResponse, error)
	GetAbility(context.Context, *AbilityRequest) (*characterv1.Ability, error)
	mustEmbedUnimplementedCharacterStatsServiceServer()
}

// UnimplementedCharacterStatsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCharacterStatsServiceServer struct{}

func (UnimplementedCharacterStatsServiceServer) CheckAbility(context.Context, *AbilityRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAbility not implemented")
}
func (UnimplementedCharacterStatsServiceServer) CheckSkill(context.Context, *SkillRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSkill not implemented")
}
func (UnimplementedCharacterStatsServiceServer) SetAbilityScore(context.Context, *SetAbilityRequest) (*SetAbilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAbilityScore not implemented")
}
func (UnimplementedCharacterStatsServiceServer) SetAbilityBonus(context.Context, *SetAbilityRequest) (*SetAbilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAbilityBonus not implemented")
}
func (UnimplementedCharacterStatsServiceServer) SetSkillBonus(context.Context, *SetSkillBonusRequest) (*SetSkillBonusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSkillBonus not implemented")
}
func (UnimplementedCharacterStatsServiceServer) GetStats(context.Context, *CharacterID) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedCharacterStatsServiceServer) GetModifier(context.Context, *GetModifierRequest) (*GetModifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModifier not implemented")
}
func (UnimplementedCharacterStatsServiceServer) GetAbility(context.Context, *AbilityRequest) (*characterv1.Ability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbility not implemented")
}
func (UnimplementedCharacterStatsServiceServer) mustEmbedUnimplementedCharacterStatsServiceServer() {}
func (UnimplementedCharacterStatsServiceServer) testEmbeddedByValue()                               {}

// UnsafeCharacterStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterStatsServiceServer will
// result in compilation errors.
type UnsafeCharacterStatsServiceServer interface {
	mustEmbedUnimplementedCharacterStatsServiceServer()
}

func RegisterCharacterStatsServiceServer(s grpc.ServiceRegistrar, srv CharacterStatsServiceServer) {
	// If the following call pancis, it indicates UnimplementedCharacterStatsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CharacterStatsService_ServiceDesc, srv)
}

func _CharacterStatsService_CheckAbility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterStatsServiceServer).CheckAbility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterStatsService_CheckAbility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterStatsServiceServer).CheckAbility(ctx, req.(*AbilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterStatsService_CheckSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterStatsServiceServer).CheckSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterStatsService_CheckSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterStatsServiceServer).CheckSkill(ctx, req.(*SkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterStatsService_SetAbilityScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAbilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterStatsServiceServer).SetAbilityScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterStatsService_SetAbilityScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterStatsServiceServer).SetAbilityScore(ctx, req.(*SetAbilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterStatsService_SetAbilityBonus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAbilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterStatsServiceServer).SetAbilityBonus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterStatsService_SetAbilityBonus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterStatsServiceServer).SetAbilityBonus(ctx, req.(*SetAbilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterStatsService_SetSkillBonus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSkillBonusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterStatsServiceServer).SetSkillBonus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterStatsService_SetSkillBonus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterStatsServiceServer).SetSkillBonus(ctx, req.(*SetSkillBonusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterStatsService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterStatsServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterStatsService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterStatsServiceServer).GetStats(ctx, req.(*CharacterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterStatsService_GetModifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterStatsServiceServer).GetModifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterStatsService_GetModifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterStatsServiceServer).GetModifier(ctx, req.(*GetModifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterStatsService_GetAbility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterStatsServiceServer).GetAbility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterStatsService_GetAbility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterStatsServiceServer).GetAbility(ctx, req.(*AbilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterStatsService_ServiceDesc is the grpc.ServiceDesc for CharacterStatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterStatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "character_stats.v1.CharacterStatsService",
	HandlerType: (*CharacterStatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAbility",
			Handler:    _CharacterStatsService_CheckAbility_Handler,
		},
		{
			MethodName: "CheckSkill",
			Handler:    _CharacterStatsService_CheckSkill_Handler,
		},
		{
			MethodName: "SetAbilityScore",
			Handler:    _CharacterStatsService_SetAbilityScore_Handler,
		},
		{
			MethodName: "SetAbilityBonus",
			Handler:    _CharacterStatsService_SetAbilityBonus_Handler,
		},
		{
			MethodName: "SetSkillBonus",
			Handler:    _CharacterStatsService_SetSkillBonus_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _CharacterStatsService_GetStats_Handler,
		},
		{
			MethodName: "GetModifier",
			Handler:    _CharacterStatsService_GetModifier_Handler,
		},
		{
			MethodName: "GetAbility",
			Handler:    _CharacterStatsService_GetAbility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "character/service/character_stats.proto",
}
