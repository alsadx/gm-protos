syntax = "proto3";

package gateway;

import "google/api/annotations.proto";
import "sso/auth.proto";
import "sso/user_info.proto";
import "campaign/campaign.proto";

option go_package = "github.com/alsadx/gm-protos/gen/go/api/v1";

service Gateway {
    // Auth Service
    rpc Register (auth.RegisterRequest) returns (auth.RegisterResponse) {
        option (google.api.http) = {
            post: "/api/auth/register"
            body: "*"
        };
    }
    rpc Login (auth.LoginRequest) returns (auth.LoginResponse) {
        option (google.api.http) = {
            post: "/api/auth/login"
            body: "*"
        };
    }
    rpc RefreshToken (auth.RefreshTokenRequest) returns (auth.RefreshTokenResponse) {
        option (google.api.http) = {
            post: "/api/auth/refresh"
            body: "*"
        };
    }
    rpc Logout (auth.LogoutRequest) returns (auth.LogoutResponse) {
        option (google.api.http) = {
            post: "/api/auth/logout"
            body: "*"
        };
    }

    // UserInfo Service
    rpc GetUserById (userinfo.GetUserByIdRequest) returns (userinfo.GetUserByIdResponse) {
        option (google.api.http) = {
            get: "/api/users/{user_id}"
        };
    }
    rpc GetUserByEmail (userinfo.GetUserByEmailRequest) returns (userinfo.GetUserByEmailResponse) {
        option (google.api.http) = {
            get: "/api/users/email/{email}"
        };
    }
    rpc UpdateUser (userinfo.UpdateUserRequest) returns (userinfo.UpdateUserResponse) {
        option (google.api.http) = {
            put: "/api/users/{user_id}"
            body: "*"
        };
    }
    rpc DeleteUser (userinfo.DeleteUserRequest) returns (userinfo.DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/api/users/{user_id}"
        };
    }

    // Campaign Tool Service
    rpc CreateCampaign (campaign.CreateCampaignRequest) returns (campaign.CreateCampaignResponse) {
        option (google.api.http) = {
            post: "/api/campaigns"
            body: "*"
        };
    }
    rpc DeleteCampaign (campaign.DeleteCampaignRequest) returns (campaign.DeleteCampaignResponse) {
        option (google.api.http) = {
            delete: "/api/campaigns/{campaign_id}"
        };
    }
    rpc GenerateInviteCode (campaign.GenerateInviteCodeRequest) returns (campaign.GenerateInviteCodeResponse) {
        option (google.api.http) = {
            post: "/api/campaigns/{campaign_id}/invite-code"
            body: "*"
        };
    }
    rpc JoinCampaign (campaign.JoinCampaignRequest) returns (campaign.JoinCampaignResponse) {
        option (google.api.http) = {
            post: "/api/campaigns/{user_id}/join"
            body: "*"
        };
    }
    rpc LeaveCampaign (campaign.LeaveCampaignRequest) returns (campaign.LeaveCampaignResponse) {
        option (google.api.http) = {
            post: "/api/campaigns/{user_id}/leave"
            body: "*"
        };
    }
    rpc GetCreatedCampaigns (campaign.GetCreatedCampaignsRequest) returns (campaign.GetCreatedCampaignsResponse) {
        option (google.api.http) = {
            get: "/api/campaigns/created"
        };
    }
    rpc GetCurrentCampaigns (campaign.GetCurrentCampaignsRequest) returns (campaign.GetCurrentCampaignsResponse) {
        option (google.api.http) = {
            get: "/api/campaigns/current"
        };
    }

    // HealthCheck
    rpc HealthCheck (auth.HealthCheckRequest) returns (auth.HealthCheckResponse) {
        option (google.api.http) = {
            get: "/health"
        };
    }
}