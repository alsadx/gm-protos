syntax = "proto3";

package auth;

import "google/api/annotations.proto";

option go_package = "github.com/alsadx/gm-protos/gen/go/ssov1";

service Auth {
    rpc Register (RegisterRequest) returns (RegisterResponse){
        option (google.api.http) = {
            post: "/api/auth/register"
            body: "*"
        };
    }

    rpc Login (LoginRequest) returns (LoginResponse){
        option (google.api.http) = {
            post: "/api/auth/login"
            body: "*"
        };
    }

    rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse){
        option (google.api.http) = {
            post: "/api/auth/refresh"
            body: "*"
        };
    }

    rpc Logout (LogoutRequest) returns (LogoutResponse){
        option (google.api.http) = {
            post: "/api/auth/logout"
            body: "*"
        };
    }

    rpc HealthCheck (HealthCheckRequest) returns (HealthCheckResponse){
        option (google.api.http) = {
            get: "/health"
        };
    }
}

message RegisterRequest {
    string email = 1;
    string password = 2;
    string name = 3;
}

message RegisterResponse {
    int64 user_id = 1;
}

message LoginRequest {
    string email = 1;
    string password = 2;
}

message LoginResponse {
    string token = 1;
    string refresh_token = 2;
}

message IsAdminRequest {
    int64 user_id = 1;
}

message IsAdminResponse {
    bool is_admin = 1;
}

message RefreshTokenRequest {
    string refresh_token = 1;
}

message RefreshTokenResponse {
    string token = 1;
    string refresh_token = 2;
}

message LogoutRequest {
    int64 user_id = 1;
}

message LogoutResponse {
    bool success = 1;
}

message HealthCheckRequest {
    
}

message HealthCheckResponse {
    enum ServingStatus {
        UNKNOWN = 0;       // Неизвестный статус
        SERVING = 1;       // Сервер готов к работе
        NOT_SERVING = 2;   // Сервер не готов к работе
    }

    // Поле для статуса
    ServingStatus status = 1;
}